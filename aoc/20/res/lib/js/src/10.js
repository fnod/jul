// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ut = require("./ut.js");
var Fs = require("fs");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var nums = Belt_List.sort(Belt_List.fromArray(Belt_Array.map(Fs.readFileSync("in/10.txt", "utf8").trim().split("\n"), Ut.pint)), (function (a, b) {
        return a - b | 0;
      }));

var diffies = Belt_List.reduce(nums, {
      d1: 0,
      d3: 1,
      prev: 0
    }, (function (acc, n) {
        var match = n - acc.prev | 0;
        switch (match) {
          case 1 :
              return {
                      d1: acc.d1 + 1 | 0,
                      d3: acc.d3,
                      prev: n
                    };
          case 2 :
              return acc;
          case 3 :
              return {
                      d1: acc.d1,
                      d3: acc.d3 + 1 | 0,
                      prev: n
                    };
          default:
            return acc;
        }
      }));

console.log(Math.imul(diffies.d1, diffies.d3));

var terminus = Belt_List.headExn(Belt_List.reverse(nums));

console.log(terminus);

function forks(l, term) {
  if (!l) {
    return 0;
  }
  var t = l.tl;
  if (Caml_obj.caml_equal(t, {
          hd: term,
          tl: /* [] */0
        })) {
    return 1;
  }
  if (t === /* [] */0) {
    return 0;
  }
  var h = l.hd;
  var next = Belt_List.keep(t, (function (x) {
          return (x - h | 0) < 4;
        }));
  return Belt_List.reduce(Belt_List.mapWithIndex(next, (function (i, param) {
                    return forks(Belt_Option.getExn(Belt_List.drop(t, i)), term);
                  })), 0, (function (acc, y) {
                return acc + y | 0;
              }));
}

console.log(forks(Belt_List.sort(Belt_List.fromArray([
                  16,
                  10,
                  15,
                  5,
                  1,
                  11,
                  7,
                  19,
                  6,
                  12,
                  4
                ]), (function (a, b) {
                return a - b | 0;
              })), 16));

console.log(forks(Belt_List.sort(Belt_List.fromArray([
                  28,
                  33,
                  18,
                  42,
                  31,
                  14,
                  46,
                  20,
                  48,
                  47,
                  24,
                  23,
                  49,
                  45,
                  19,
                  38,
                  39,
                  11,
                  1,
                  32,
                  25,
                  35,
                  8,
                  17,
                  7,
                  9,
                  4,
                  2,
                  34,
                  10,
                  3
                ]), (function (a, b) {
                return a - b | 0;
              })), 48));

exports.nums = nums;
exports.diffies = diffies;
exports.terminus = terminus;
exports.forks = forks;
/* nums Not a pure module */
