// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function $$parseInt(str) {
  return Belt_Option.getExn(Belt_Int.fromString(str));
}

function comb(l, m) {
  if (m === 0) {
    return {
            hd: /* [] */0,
            tl: /* [] */0
          };
  }
  if (!l) {
    return /* [] */0;
  }
  var t = l.tl;
  var h = l.hd;
  return Belt_List.concat(Belt_List.map(comb(t, m - 1 | 0), (function (ll) {
                    return Belt_List.concat({
                                hd: h,
                                tl: /* [] */0
                              }, ll);
                  })), comb(t, m));
}

var expenses = Belt_List.fromArray(Belt_Array.map(Fs.readFileSync("in/01.txt", "utf8").trim().split("\n"), $$parseInt));

console.log(Belt_List.reduce(Belt_Option.getExn(Belt_List.getBy(comb(expenses, 2), (function (p) {
                    return Belt_List.reduce(p, 0, (function (a, i) {
                                  return a + i | 0;
                                })) === 2020;
                  }))), 1, (function (a, i) {
            return Math.imul(a, i);
          })));

console.log(Belt_List.reduce(Belt_Option.getExn(Belt_List.getBy(comb(expenses, 3), (function (p) {
                    return Belt_List.reduce(p, 0, (function (a, i) {
                                  return a + i | 0;
                                })) === 2020;
                  }))), 1, (function (a, i) {
            return Math.imul(a, i);
          })));

exports.$$parseInt = $$parseInt;
exports.comb = comb;
exports.expenses = expenses;
/* expenses Not a pure module */
