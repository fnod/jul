// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var re = /(\d+)-(\d+) ([a-z]): ([a-z]+)/;

function $$parseInt(str) {
  return Belt_Option.getExn(Belt_Int.fromString(str));
}

function countInstances(_str, sub, _c) {
  while(true) {
    var c = _c;
    var str = _str;
    var i = str.indexOf(sub);
    if (i === -1) {
      return c;
    }
    _c = c + 1 | 0;
    _str = str.slice(i + 1 | 0);
    continue ;
  };
}

function charPair(str, i1, i2) {
  return [
          str.charAt(i1),
          str.charAt(i2)
        ];
}

function pwIsValid(ps) {
  if (ps.length !== 5) {
    return false;
  }
  var min = ps[1];
  var max = ps[2];
  var pol = ps[3];
  var pw = ps[4];
  var n = countInstances(pw, pol, 0);
  if (n >= Belt_Option.getExn(Belt_Int.fromString(min))) {
    return n <= Belt_Option.getExn(Belt_Int.fromString(max));
  } else {
    return false;
  }
}

function pwIsValid2(ps) {
  if (ps.length !== 5) {
    return false;
  }
  var i1 = ps[1];
  var i2 = ps[2];
  var pol = ps[3];
  var pw = ps[4];
  var match = charPair(pw, Belt_Option.getExn(Belt_Int.fromString(i1)) - 1 | 0, Belt_Option.getExn(Belt_Int.fromString(i2)) - 1 | 0);
  var d = match[1];
  var c = match[0];
  if (c === pol && d !== pol) {
    return true;
  } else if (d === pol) {
    return c !== pol;
  } else {
    return false;
  }
}

var pws = Belt_Array.map(Belt_Array.map(Belt_Array.map(Fs.readFileSync("in/2.txt", "utf8").trim().split(/\r?\n/), Belt_Option.getExn), (function (x) {
            return Caml_option.null_to_opt(x.match(re));
          })), Belt_Option.getExn);

console.log(Belt_Array.keep(Belt_Array.map(pws, pwIsValid), (function (x) {
            return x;
          })).length);

console.log(Belt_Array.keep(Belt_Array.map(pws, pwIsValid2), (function (x) {
            return x;
          })).length);

exports.re = re;
exports.$$parseInt = $$parseInt;
exports.countInstances = countInstances;
exports.charPair = charPair;
exports.pwIsValid = pwIsValid;
exports.pwIsValid2 = pwIsValid2;
exports.pws = pws;
/* pws Not a pure module */
