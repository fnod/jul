// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ut = require("./ut.js");
var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

var nums = Belt_Array.map(Fs.readFileSync("in/09.txt", "utf8").trim().split("\n"), Ut.pint);

function getInvalid(ns, _i, pa) {
  while(true) {
    var i = _i;
    if (!Belt_Array.some(Ut.comba(Belt_Array.slice(ns, i - pa | 0, pa), 2), (function(i){
          return function (a) {
            return (Belt_Array.getExn(a, 0) + Belt_Array.getExn(a, 1) | 0) === Belt_Array.getExn(ns, i);
          }
          }(i)))) {
      return Belt_Array.getExn(ns, i);
    }
    _i = i + 1 | 0;
    continue ;
  };
}

var inv = getInvalid(nums, 25, 25);

console.log(inv);

function sum(ns) {
  return Belt_Array.reduce(ns, 0, (function (acc, x) {
                return acc + x | 0;
              }));
}

function min(ns) {
  return Belt_Array.reduce(Belt_Array.sliceToEnd(ns, 1), Belt_Array.getExn(ns, 0), (function (mi, n) {
                if (n < mi) {
                  return n;
                } else {
                  return mi;
                }
              }));
}

function max(ns) {
  return Belt_Array.reduce(Belt_Array.sliceToEnd(ns, 1), Belt_Array.getExn(ns, 0), (function (ma, n) {
                if (n > ma) {
                  return n;
                } else {
                  return ma;
                }
              }));
}

function terms(ns, _i, _len, match) {
  while(true) {
    var len = _len;
    var i = _i;
    var a = Belt_Array.slice(ns, i, len);
    if (sum(a) === match) {
      return a;
    }
    if (sum(a) < match) {
      _len = len + 1 | 0;
      continue ;
    }
    if (sum(a) <= match) {
      return [];
    }
    _len = 2;
    _i = i + 1 | 0;
    continue ;
  };
}

var ts = terms(nums, 0, 2, inv);

console.log(min(ts) + max(ts) | 0);

exports.nums = nums;
exports.getInvalid = getInvalid;
exports.inv = inv;
exports.sum = sum;
exports.min = min;
exports.max = max;
exports.terms = terms;
exports.ts = ts;
/* nums Not a pure module */
