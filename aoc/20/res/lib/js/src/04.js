// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

function prsi(s) {
  return Belt_Option.getExn(Belt_Int.fromString(s));
}

function isValidPassport(m) {
  var a = Belt_MapString.keysToArray(m);
  if (a.length === 8) {
    return true;
  } else if (a.length === 7) {
    return !Belt_Array.some(a, (function (x) {
                  return x === "cid";
                }));
  } else {
    return false;
  }
}

function validYear(byr, min, max) {
  var y = Belt_Int.fromString(byr);
  if (y !== undefined && y >= min) {
    return y <= max;
  } else {
    return false;
  }
}

function validHeight(hgt) {
  var match = hgt.match(/(\d{2,3})(in|cm)/);
  if (match === null) {
    return false;
  }
  if (match.length !== 3) {
    return false;
  }
  var v = match[1];
  var u = match[2];
  if (u === "cm" && Belt_Option.getExn(Belt_Int.fromString(v)) >= 150 && Belt_Option.getExn(Belt_Int.fromString(v)) <= 193) {
    return true;
  } else if (u === "in" && Belt_Option.getExn(Belt_Int.fromString(v)) >= 59) {
    return Belt_Option.getExn(Belt_Int.fromString(v)) <= 76;
  } else {
    return false;
  }
}

function validHcl(hcl) {
  var match = hcl.match(/^#[0-9a-f]{6}$/);
  return match !== null;
}

function validEcl(ecl) {
  return Belt_Array.some([
              "amb",
              "blu",
              "brn",
              "gry",
              "grn",
              "hzl",
              "oth"
            ], (function (c) {
                return c === ecl;
              }));
}

function validPid(pid) {
  var match = pid.match(/^\d{9}$/);
  return match !== null;
}

var passports = Belt_Array.map(Belt_Array.map(Belt_Array.map(Fs.readFileSync("in/4.txt", "utf8").trim().split("\n\n"), (function (s) {
                return s.replace(/\n/g, " ");
              })), (function (s) {
            return Belt_Array.map(Belt_Array.map(s.split(" "), (function (param) {
                              return param.split(":");
                            })), (function (kv) {
                          return [
                                  Caml_array.get(kv, 0),
                                  Caml_array.get(kv, 1)
                                ];
                        }));
          })), Belt_MapString.fromArray);

var validPassports = Belt_Array.keep(passports, isValidPassport);

var nvp = validPassports.length;

console.log("part 1: " + nvp);

var withValidFields = Belt_Array.keep(validPassports, (function (p) {
        if (validYear(Belt_MapString.getExn(p, "byr"), 1920, 2002) && validYear(Belt_MapString.getExn(p, "iyr"), 2010, 2020) && validYear(Belt_MapString.getExn(p, "eyr"), 2020, 2030) && validHeight(Belt_MapString.getExn(p, "hgt")) && validHcl(Belt_MapString.getExn(p, "hcl")) && validEcl(Belt_MapString.getExn(p, "ecl"))) {
          return validPid(Belt_MapString.getExn(p, "pid"));
        } else {
          return false;
        }
      }));

var nvf = withValidFields.length;

console.log("part 2: " + nvf);

exports.prsi = prsi;
exports.isValidPassport = isValidPassport;
exports.validYear = validYear;
exports.validHeight = validHeight;
exports.validHcl = validHcl;
exports.validEcl = validEcl;
exports.validPid = validPid;
exports.passports = passports;
exports.validPassports = validPassports;
exports.nvp = nvp;
exports.withValidFields = withValidFields;
exports.nvf = nvf;
/* passports Not a pure module */
