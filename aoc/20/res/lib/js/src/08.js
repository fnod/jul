// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function pint(s) {
  return Belt_Option.getExn(Belt_Int.fromString(s));
}

function toCmd(str) {
  var match = str.match(/(\w{3}) ([0-9+-]+)/);
  if (match === null) {
    return Js_exn.raiseError("bad command: " + str);
  }
  if (match.length !== 3) {
    return Js_exn.raiseError("bad command: " + str);
  }
  var ins = match[1];
  var val = match[2];
  return [
          ins,
          Belt_Option.getExn(Belt_Int.fromString(val)),
          false
        ];
}

var commands = Belt_Array.reduceWithIndex(Belt_Array.map(Fs.readFileSync("in/08.txt", "utf8").trim().split("\n"), toCmd), undefined, (function (a, c, i) {
        return Belt_MapInt.set(a, i, c);
      }));

function run(_cs, _i, _acc) {
  while(true) {
    var acc = _acc;
    var i = _i;
    var cs = _cs;
    if (i === Belt_MapInt.size(cs)) {
      return [
              true,
              acc
            ];
    }
    var match = Belt_MapInt.getExn(cs, i);
    if (match[2]) {
      return [
              false,
              acc
            ];
    }
    switch (match[0]) {
      case "acc" :
          var val = match[1];
          _acc = acc + val | 0;
          _i = i + 1 | 0;
          _cs = Belt_MapInt.set(cs, i, [
                "acc",
                val,
                true
              ]);
          continue ;
      case "jmp" :
          var val$1 = match[1];
          _i = i + val$1 | 0;
          _cs = Belt_MapInt.set(cs, i, [
                "jmp",
                val$1,
                true
              ]);
          continue ;
      case "nop" :
          _i = i + 1 | 0;
          _cs = Belt_MapInt.set(cs, i, [
                "nop",
                match[1],
                true
              ]);
          continue ;
      default:
        return Js_exn.raiseError("invalid/no command at addr " + i);
    }
  };
}

console.log(run(commands, 0, 0));

console.log(Belt_Array.getBy(Belt_Array.map(Belt_Array.map(Belt_MapInt.toArray(Belt_MapInt.keep(commands, (function (param, param$1) {
                            var ins = param$1[0];
                            if (ins === "jmp") {
                              return true;
                            } else {
                              return ins === "nop";
                            }
                          }))), (function (param) {
                    var v = param[1];
                    var k = param[0];
                    switch (v[0]) {
                      case "jmp" :
                          return Belt_MapInt.set(commands, k, [
                                      "nop",
                                      v[1],
                                      false
                                    ]);
                      case "nop" :
                          return Belt_MapInt.set(commands, k, [
                                      "jmp",
                                      v[1],
                                      false
                                    ]);
                      default:
                        return Js_exn.raiseError("unexpected instruction appeared");
                    }
                  })), (function (p) {
                return run(p, 0, 0);
              })), (function (param) {
            return param[0];
          })));

exports.pint = pint;
exports.toCmd = toCmd;
exports.commands = commands;
exports.run = run;
/* commands Not a pure module */
